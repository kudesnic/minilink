version: "3.7"
services:
  database:
    image: postgres:latest
    restart: on-failure
    volumes:
      - ./docker/db:/var/lib/postgres
      - ./docker/postgres-init-script:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_USER}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_DATABASE_TEST}
      PGDATA: /var/lib/postgres
  adminer:
    image: adminer
    restart: on-failure
    env_file:
      - ./.env
    ports:
      - ${ADMINER_PORT}:8080
    depends_on:
      - database
  nginx:
    env_file:
      - ./.env
    image: nginx:1.17.8-alpine
    restart: on-failure
    depends_on:
      - php
      - frontend
    volumes:
      - './backend:/usr/src/backend'
      - './frontend:/usr/src/frontend'
      - './docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro'
      - './docker/certs/cert.pem:/etc/nginx/conf.d/cert.pem:ro'
      - './docker/certs/key.pem:/etc/nginx/conf.d/key.pem:ro'
    ports:
      - ${NGINX_PORT}:443
  php:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    volumes:
      - './backend:/usr/src/backend'
    restart: on-failure
    env_file:
      - ./.env
    user: ${LOCAL_USER}
  frontend:
    build:
      dockerfile: docker/frontend/Dockerfile
      context: .
    restart: on-failure
    env_file:
      - ./.env
    user: ${LOCAL_USER}
    volumes:
      - ./frontend:/usr/src/frontend

